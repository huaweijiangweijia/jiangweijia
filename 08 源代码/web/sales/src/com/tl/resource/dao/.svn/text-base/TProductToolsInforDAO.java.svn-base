package com.tl.resource.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.tl.common.util.PaginationSupport;
import com.tl.resource.business.dto.ImportSalesPriceDto;
import com.tl.resource.business.dto.TreeDto;
import com.tl.resource.dao.pojo.TProductToolsInfor;
import com.tl.resource.dao.pojo.TProductToolsInforExample;

public interface TProductToolsInforDAO {
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    int countByExample(TProductToolsInforExample example);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    int deleteByExample(TProductToolsInforExample example);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    void insert(TProductToolsInfor record);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    void insertSelective(TProductToolsInfor record);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    List selectByExample(TProductToolsInforExample example);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    TProductToolsInfor selectByPrimaryKey(String id);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    int updateByExampleSelective(TProductToolsInfor record, TProductToolsInforExample example);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    int updateByExample(TProductToolsInfor record, TProductToolsInforExample example);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    int updateByPrimaryKeySelective(TProductToolsInfor record);

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_product_tools_infor
     *
     * @ibatorgenerated Sat Oct 10 22:46:55 CST 2009
     */
    int updateByPrimaryKey(TProductToolsInfor record);
    
    public List<TProductToolsInfor> getProToolsByPage(PaginationSupport pageInfo);
    
    /**
     * 根据父结点获取所有子节点
     * @param parId
     * @return
     */
    public List<TProductToolsInfor> getProToolsByParId(String parId);
    
    /**
     * 获取根节点下的所有产品
     * @param pageInfo
     * @return
     */
    public List<TreeDto> getProTreeByPage(PaginationSupport pageInfo);
    
    /**
     * 获取属于根结点的产品总数
     * @return
     */
    public int getProToolsTotal();
    
    /**
     * 获取ID
     * @param parId
     * @return
     */
    public String getId(String parId);
    
    /**
     * 根据ID获取产品
     * @param id
     * @return 产品信息
     */
    public TreeDto getProTreeById(String id);
    
    /**
     * 根据ID删除产品信息
     * @param id
     */
    public void deleteProTools(String id);
    
    /**
     * 批量删除产品信息
     * @param list
     */
    public void deleteProTools(List<TreeDto> list);
    
    /**
     * 根据ID获取产品信息
     */
    public TProductToolsInfor getProToolsById(String id);
    
    /**
     * 修改产品信息
     * @param proTools
     */
    public void updateProToolsById(TProductToolsInfor proTools);
    
    /**
     * 根据搜索条件获取产品信息
     */
    public List<TreeDto> getProToolsBySearch(Map<String, Object> parmMap);
    
    /**
     * 根据搜索条件获取产品信息总数
     * @param parmMap
     * @return
     */
    public int getProToolsTotal(Map<String, Object> parmMap);
    
    
    /**
     * 根据搜索条件获取订单的产品信息
     */
    public List<TreeDto> getOrderProToolsList(Map<String, Object> parmMap);
    
    /**
     * 根据搜索条件获取订单的产品信息总数
     * @param parmMap
     * @return
     */
    public int getOrderProToolsTotal(Map<String, Object> parmMap);
    
    /**
     * 根据ID获取工具信息
     * @param id
     * @return
     */
    public TreeDto getProductToolsInfoById(String id);
    
    /**
     * 根据产品牌号 名称 品牌 来源 查找产品
     * @param treeDto
     * @return
     */
    public List<TreeDto> getTreeDto(TreeDto treeDto);
    
    /**
     * 获取工具信息(ftl 2009-12-23)
     * @param parmMap
     * @return
     */
    public List<TreeDto> getToolsBySearch(Map<String, Object> parmMap);
    
    /**
     * 获取工具信息不级联子节点(ftl 2009-12-24)
     * @param parmMap
     * @return
     */
    public List<TreeDto> getToolsByRootNode(Map<String, Object> parmMap);
    
    /**
     * 获取工具信息级联子节点(ftl 2009-12-24)
     * @param parmMap
     * @return
     */
    public List<TreeDto> getToolsWithChildren(Map<String, Object> parmMap);

    /**
     * 效验产品是否存在
     * @param imsDto
     * @return
     */
	boolean checkProToolsIsHaving(ImportSalesPriceDto imsDto);

	List<HashMap> checkProsToolsIsHaving(List<ImportSalesPriceDto> imsDto);
	/**
	 * 获取产品信息
	 * @param imsDto
	 * @return
	 */
	TProductToolsInfor getProTools(ImportSalesPriceDto imsDto);

	PaginationSupport findSupToolsList(Map<String, Object> mparams,
			String startIndex, String pageSize);
	public void sycNotStandardToolsInfor(String toolsId);
	
	void loadToolsDataFile(String fileName) throws Exception;
	
	/**
	 * 临时表中工具信息品牌不存在的数据 并返回
	 * @return
	 */
	List<TreeDto> checkBrandIsExist(Map<String, Object> parmMap);
	
	/**
	 * 临时表中工具信息组别不存在的数据 并返回
	 * @return
	 */
	List<TreeDto> checkSortIsExist();
	
	/**
	 * 临时表中工具信息已存在的数据 并返回
	 * @return
	 */
	List<TreeDto> checkToolsIsExist(Map<String, Object> parmMap);
	
	/**
	 * 将临时表中符合条件的数据持久化到正式表
	 * @throws Exception
	 */
	void insertTools() throws Exception;
	
	/**
	 * 符合条件的数据总数
	 * @return
	 */
	Integer getCountCanInsert();
	
	/**
	 * 清空临时表数据
	 */
	void deleteTempData();
	
	/**
	 * 将临时表中符合条件的数据持久化到正式表 普通导入
	 * @throws Exception
	 */
	void generImpTools() throws Exception;
	
	void impOrderPrice() throws Exception;
	
	List<TreeDto> getExistTools(Map<String, Object> parmMap);
	
	/**
	 * 临时表中重复数据
	 * @return
	 */
	List<TreeDto> getRepeatData();
	
	/**
	 * 工具信息是否做过入库或出库
	 */
	Integer getResCntByToolsId(String toolsId);
}